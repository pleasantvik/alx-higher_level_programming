===============================
Doctest for 4. Text indentation
===============================

This module defines a text indentation function ```def text_indentation(text):```.

# USAGE
========

Valid calls:
------------

* ```def text_indentation(text):``` prints a text with 2 new lines after
                                    each of these characters: ., ? and :
::

    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("Lorem ipsum dolor sit amet, consectetur adipiscing elit."
    ... "Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere?"
    ... "Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud") #doctype: #NORMALIZE_WHITESPACE
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud

    >>> text_indentation("Hello?")
    Hello?
    <BLANKLINE>

* No spaces are printed at the beginning of a line.
::

    >>> text_indentation("   Hi there.")
    Hi there.
    <BLANKLINE>

    >>> text_indentation("          ")

* Similarly, no spaces are printed at the end of each printed line.
::

    >>> text_indentation("Hello.   ")
    Hello.
    <BLANKLINE>
    >>> text_indentation("    Woah now.    This is messy.   ")
    Woah now.
    <BLANKLINE>
    This is messy.
    <BLANKLINE>

    >>> text_indentation("No ending period, what bad grammar")
    No ending period, what bad grammar

* New lines within a string are printed as normal.
::

    >>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")
    Let's print a new-line! Here goes:
    <BLANKLINE>
    <BLANKLINE>
    Printed.
    <BLANKLINE>

    >>> text_indentation("\n\n\n We just printed three new lines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    We just printed three new lines.
    <BLANKLINE>


Invalid calls:
--------------

* text must be a string, else raise a TypeError exception
::

    >>> text_indentation(100)
    Traceback (most recent call last):
    TypeError: text must be a string
    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string
    >>> text_indentation({1: "a", 2: "b"})
    Traceback (most recent call last):
    TypeError: text must be a string

* The function requires only 1 argument (text) to work
::

    >>> text_indentation()
    Traceback (most recent call last):
    TypeError: text_indentation() missing 1 required positional argument: 'text'
    >>> text_indentation("I can do hard things, maybe better", "yes I can")
    Traceback (most recent call last):
    TypeError: text_indentation() takes 1 positional argument but 2 were given
